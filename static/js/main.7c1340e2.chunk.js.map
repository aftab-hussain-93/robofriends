{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","cardComponent","robots","map","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChange","event","searchText","target","value","fetch","then","response","json","user","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAaeA,EAXF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACzB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,iBAA6CK,IAAI,WACzD,6BACC,4BAAKJ,GACL,2BAAIC,MCKOI,EAVE,SAAC,GAAc,IACzBC,EADwB,EAAZC,OACWC,KAAI,YAAwB,IAAtBT,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC5C,OAAO,kBAAC,EAAD,CAAMQ,IAAKV,EAAIA,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,OAGlD,OAAQ,6BACNK,ICKYI,EAZG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OACC,yBAAKT,UAAU,OACd,2BACCA,UAAY,mCACZU,KAAO,SACPC,YAAc,oBACdC,SAAUH,MCgBCI,G,wDAtBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,UAAS,GAHO,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAIG,KAAKJ,MAAMC,SACP,sCAGAG,KAAKL,MAAMO,a,GAjBOC,cCObC,EAPA,SAACT,GACf,OACC,yBAAKU,MAAO,CAAEC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UACjEb,EAAMO,WC+CKO,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKV,SAAS,CAAEW,WAAYD,EAAME,OAAOC,SAdzC,EAAKlB,MAAQ,CACXV,OAAQ,GACR0B,WAAY,IAJF,E,gEAOO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKlB,SAAS,CAAEf,OAAQiC,S,+BAQtB,IAAD,EACuBnB,KAAKJ,MAA5BV,EADA,EACAA,OAAQ0B,EADR,EACQA,WACTQ,EAAiBlC,EAAOmC,QAAO,SAACC,GACpC,OAAOA,EAAM3C,KACV4C,cACAC,SAASZ,EAAWW,kBAGzB,OAAsB,IAAlBrC,EAAOuC,OACF,wBAAI5C,UAAU,MAAd,WAGL,yBAAKA,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWS,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUxB,OAAQkC,W,GArCZM,IAAMvB,WCKJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,6BACD,kBAAC,EAAD,QAGCC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,a","file":"static/js/main.7c1340e2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email}) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?size=200x150`} alt=\"robots\"/>\r\n\t\t\t<div>\r\n\t\t\t\t<h4>{name}</h4>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>);\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardComponent = robots.map(({id, name, email}) => {\r\n\t\treturn <Card key={id} id={id} name={name} email={email}/>\r\n\t});\r\n\t\r\n\treturn (<div>\r\n\t\t{cardComponent}\r\n\t\t</div>)\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\t\tclassName = \"pa3 ba b--green bg-lightest-blue\"\r\n\t\t\t\ttype = \"search\" \r\n\t\t\t\tplaceholder = \"Search Robofriend\" \r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>);\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\thasError:false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h2>Oooops</h2>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn this.props.children\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY:'scroll', border:'3px solid black', height:'500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>)\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"./App.css\";\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchText: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(user => {\r\n          this.setState({ robots: user })\r\n        });\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchText: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const {robots, searchText } = this.state\r\n    const filteredRobots = robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(searchText.toLowerCase());\r\n    });\r\n\r\n    if (robots.length === 0) {\r\n      return <h2 className=\"tc\">Loading</h2>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h2 className=\"f1\">RoboFriends</h2>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n          \t <CardList robots={filteredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <div>\n\t<App />\n  </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}